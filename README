# PubSub Solution

### This README represent idea of solution to pubsub assignement.
The instructions still placed [here](./instruction/INSTRUCTION.md).

#### Following, Class Diagram represent pubsub project design, then we could see dependency and aggregation for each class
## Class Diagram
![PubSub Class Diagram](/diagram/Taobin-pubsub-class-diagram.png)
***Remark**: the blue text meaning add/edit to class or method*

#### From Class Diagram we can brought concepts in software engineerig as below.

1. **SOLID**
    - **Single Responsibility Principle (SRP)**: Each class and interface has a single responsibility. For example, the ***IEvent interface*** defines the structure of an ***event***, the ***ISubscriber interface*** defines the structure of a ***subscriber***, and the ***IPublishSubscribeService interface*** defines the methods for ***publishing, subscribing, and unsubscribing*** to events.

    - **Open/Closed Principle (OCP)**: The code is designed to be open for extension but closed for modification. For example, new event types (e.g., ***MachineSaleEvent, MachineRefillEvent***) can be added without modifying existing code.

    - **Liskov Substitution Principle (LSP)**: Subclasses (***MachineSaleEvent, MachineRefillEvent***) can be substituted for their base class (***IEvent***) without affecting the behavior of the program.

    - **Interface Segregation Principle (ISP)**: Interfaces (***IPublishSubscribeService, IMachinePublishSubscribeService***) are ***segregated into smaller***, more specific interfaces, each serving a different purpose.

    - **Dependency Inversion Principle (DIP)**: High-level modules (e.g., ***MachinePublishSubscribeService***) depend on abstractions (e.g., ***IPublishSubscribeService***, ***ISubscriber***), rather than concrete implementations.

2. **Dependency Injection**
    - The code demonstrates dependency injection in the ***MachineSubscriber class constructor***, which receives an array of Machine objects.
    - This allows for easier testing and flexibility in changing the implementation of dependencies.

3. **Separation of Concerns**
    - The code separates different concerns into distinct classes and interfaces.
    - Event handling, subscribers, and the publish/subscribe service are separated, making the code more modular and easier to maintain.

4. **Test-Driven Development (TDD)**
    - The design of the code, especially the separation of concerns and use of interfaces, can facilitate writing testable code.
    - However, the code does not include tests, so it does not directly demonstrate TDD.

## Flowchart Diagram
![PubSub Flowchart Diagram](/diagram/Taobin-pubsub-flowchart.png)

#### Present logical program running process from start to end